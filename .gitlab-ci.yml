stages:
  - terraform
  - connect-to-cluster
  - set-cluster-ip
  - trigger-deployment
  - destroy

image: 
  name: hashicorp/terraform
  entrypoint: [""]

variables:
  TF_LOG: DEBUG
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
  AWS_SESSION_TOKEN: $AWS_SESSION_TOKEN
  ENCODED_ID_ED25519: $ENCODED_ID_ED25519
  ID_ED25519_pub: $ID_ED25519_PUB
  ACCESS_TOKEN: $CI_ACCESS_TOKEN_2
  AWS_CREDENTIALS: $AWS_CREDENTIALS

terraform-job:
  stage: terraform
  script:
    - apk add --no-cache jq
    - mkdir -p ~/.ssh
    - echo "$ENCODED_ID_ED25519" | base64 -d > ~/.ssh/id_ed25519
    - echo "$ID_ED25519_pub" > ~/.ssh/id_ed25519.pub
    - chmod 600 ~/.ssh/id_ed25519
    - mkdir -p ~/.aws
    - echo "$AWS_CREDENTIALS" > ~/.aws/credentials
    - cd terraform
    - export AWS_PROFILE=default
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - export AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN
    - terraform init
    - terraform apply -auto-approve
  artifacts:
    paths:
      - terraform/terraform.tfstate
  only:
    - main
  when: manual 

connect-to-cluster-job:
  stage: connect-to-cluster
  script:
    - apk add --no-cache curl jq kubectl
    - mkdir -p ~/.ssh
    - echo "$ENCODED_ID_ED25519" | base64 -d > ~/.ssh/id_ed25519
    - echo "$ID_ED25519_pub" > ~/.ssh/id_ed25519.pub
    - chmod 400 ~/.ssh/id_ed25519
    - cd terraform
    - terraform init
    - terraform show -json > terraform_output.json
    - jq -r '.values.root_module.resources[] | select(.address == "aws_instance.ec2_k8s_master") | .values.public_ip' terraform_output.json > cluster_ip.txt
    - cat cluster_ip.txt
    - |
      if [ ! -s cluster_ip.txt ]; then
        echo "❌ Error: cluster_ip.txt is empty! Terraform output might be incorrect."
        exit 1
      fi
    - jq -r '.outputs.ec2_k8s_workers_public_ips.value[]' terraform.tfstate > worker_ips.txt
    - cat worker_ips.txt
    - |
      if [ ! -s worker_ips.txt ]; then
        echo "❌ Error: worker_ips.txt is empty! Terraform output might be incorrect."
        exit 1
      fi
    - jq -r '.outputs.ec2_nfs_server_private_ip.value' terraform.tfstate > nfs_server_ip.txt
    - cat nfs_server_ip.txt
    - |
      if [ ! -s nfs_server_ip.txt ]; then
        echo "❌ Error: nfs_server_ip.txt is empty! Terraform output might be incorrect."
        exit 1
      fi   - echo "pushing cluster ip to gitlab"
    - |
      curl --request PUT --header "PRIVATE-TOKEN: $CI_ACCESS_TOKEN_FULL" --header "Content-Type: application/json" --data "{\"key\": \"NFS_SERVER_IP\", \"value\": \"$(cat nfs_server_ip.txt)\"}" "https://gitlab.com/api/v4/groups/$GROUP_ID/variables/NFS_SERVER_IP"
    - |
      curl --request PUT --header "PRIVATE-TOKEN: $CI_ACCESS_TOKEN_FULL" --header "Content-Type: application/json" --data "{\"key\": \"CLUSTER_IP\", \"value\": \"$(cat cluster_ip.txt)\"}" "https://gitlab.com/api/v4/groups/$GROUP_ID/variables/CLUSTER_IP"
    - |
      curl --request PUT --header "PRIVATE-TOKEN: $CI_ACCESS_TOKEN_FULL" --header "Content-Type: application/json" --data "{\"key\": \"WORKER_IPS\", \"value\": \"$(cat worker_ips.txt)\"}" "https://gitlab.com/api/v4/groups/$GROUP_ID/variables/WORKER_IPS"
    # - cd ..
    # - chmod u+x ./init.sh ./transform_worker_ips.sh
    # - ./transform_worker_ips.sh terraform/worker_ips.txt > terraform/worker_ips_transformed.txt
    # - ./init.sh terraform/cluster_ip.txt terraform/worker_ips_transformed.txt    
    
  dependencies:
    - terraform-job
  artifacts:
    paths:
      - terraform/terraform.tfstate
      - terraform/cluster_ip.txt
      - terraform/worker_ips.txt
  only:
    - main
  when: manual 

set-cluster-ip-job:
  stage: set-cluster-ip
  script:
    - cd terraform
    - cat cluster_ip.txt
  dependencies:
    - connect-to-cluster-job
  artifacts:
    paths:
      - terraform/terraform.tfstate
      - terraform/cluster_ip.txt
  only:
    - main
  when: manual 

terraform-destroy-job:
  stage: destroy
  script:
    - apk add --no-cache jq
    - mkdir -p ~/.ssh
    - echo "$ENCODED_ID_ED25519" | base64 -d > ~/.ssh/id_ed25519
    - echo "$ID_ED25519_pub" > ~/.ssh/id_ed25519.pub
    - chmod 600 ~/.ssh/id_ed25519
    - mkdir -p ~/.aws
    - echo "$AWS_CREDENTIALS" > ~/.aws/credentials    
    - cd terraform
    - export AWS_PROFILE=default
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    - export AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN
    - terraform init
    - terraform apply -auto-approve
  dependencies:
    - terraform-job
  artifacts:
    paths:
      - terraform/terraform.tfstate
  only:
    - main
  when: manual

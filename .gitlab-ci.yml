stages:
  - terraform
  - connect-to-cluster
  - set-cluster-ip
  - trigger-deployment
  - destroy

image: 
  name: hashicorp/terraform
  entrypoint: [""]

variables:
  TF_LOG: DEBUG
  AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
  AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
  AWS_SESSION_TOKEN: $AWS_SESSION_TOKEN
  ENCODED_ID_ED25519: $ENCODED_ID_ED25519
  ID_ED25519_pub: $ID_ED25519_PUB
  ACCESS_TOKEN: $CI_ACCESS_TOKEN_2

terraform-job:
  stage: terraform
  script:
    - apk add --no-cache jq
    - mkdir -p ~/.ssh
    - echo "$ENCODED_ID_ED25519" | base64 -d > ~/.ssh/id_ed25519
    - echo "$ID_ED25519_pub" > ~/.ssh/id_ed25519.pub
    - chmod 600 ~/.ssh/id_ed25519
    - cd terraform
    - terraform init
    - terraform apply -auto-approve -var "aws_access_key_id=$AWS_ACCESS_KEY_ID" -var "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" -var "aws_session_token=$AWS_SESSION_TOKEN"
  artifacts:
    paths:
      - terraform/terraform.tfstate
  only:
    - main
  when: manual 

connect-to-cluster-job:
  stage: connect-to-cluster
  script:
    - apk add --no-cache jq
    - mkdir -p ~/.ssh
    - echo "$ENCODED_ID_ED25519" | base64 -d > ~/.ssh/id_ed25519
    - echo "$ID_ED25519_pub" > ~/.ssh/id_ed25519.pub
    - chmod 400 ~/.ssh/id_ed25519
    - cd terraform
    - terraform init
    - terraform show -json > terraform_output.json
    - jq -r '.values.root_module.resources[] | select(.address == "aws_instance.ec2_k8s_master") | .values.public_ip' terraform_output.json > cluster_ip.txt
    - cat cluster_ip.txt
    - |
      if [ ! -s cluster_ip.txt ]; then
        echo "❌ Error: cluster_ip.txt is empty! Terraform output might be incorrect."
        exit 1
      fi
    - |
      ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -o IdentitiesOnly=yes -o User=ubuntu ubuntu@$(cat cluster_ip.txt) "export ACCESS_TOKEN=$ACCESS_TOKEN && bash -s" << 'EOF'
      git clone https://oauth2:$ACCESS_TOKEN@gitlab.com/itba-73-40-microservicios/alumnos/grupo-a/taskmanager2000-agents.git
      if [ $? -eq 0 ]; then
        echo "✅ Cloned taskmanager2000-agents"
      else
        echo "❌ Git clone failed for taskmanager2000-agents"
        exit 1
      fi
      git clone https://oauth2:$ACCESS_TOKEN@gitlab.com/itba-73-40-microservicios/alumnos/grupo-a/taskmanager2000-cluster-config.git
      if [ $? -eq 0 ]; then
        echo "✅ Cloned taskmanager2000-cluster-config"
      else
        echo "❌ Git clone failed for taskmanager2000-cluster-config"
        exit 1
      fi
      git clone https://oauth2:$ACCESS_TOKEN@gitlab.com/itba-73-40-microservicios/alumnos/grupo-a/taskmanager2000.git
      if [ $? -eq 0 ]; then
        echo "✅ Cloned taskmanager2000"
      else
        echo "❌ Git clone failed for taskmanager2000"
        exit 1
      fi
      EOF
    - ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -o IdentitiesOnly=yes -o User=ubuntu ubuntu@$(cat cluster_ip.txt) "sudo kubeadm token create --print-join-command > ~/join-command.sh"
    - scp -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -o IdentitiesOnly=yes -o User=ubuntu ubuntu@$(cat cluster_ip.txt):~/join-command.sh .
    - jq -r '.outputs.ec2_k8s_workers_public_ips.value[]' /home/martinippo/Desktop/ITBA/MICROSERVICIOS/taskmanager2000-cluster-config/tmp/terraform/terraform.tfstate > worker_ips.txt
    - |
      worker_ips=$(cat worker_ips.txt)
      for ip in $worker_ips; do
        echo "Connecting to $ip"
        scp -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -o IdentitiesOnly=yes -o User=ubuntu join-command.sh ubuntu@$ip:~/join-command.sh
        ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -o IdentitiesOnly=yes -o User=ubuntu ubuntu@$ip "sudo bash ~/join-command.sh"
      done


    
  dependencies:
    - terraform-job
  artifacts:
    paths:
      - terraform/terraform.tfstate
      - terraform/cluster_ip.txt
  only:
    - main
  when: manual 

set-cluster-ip-job:
  stage: set-cluster-ip
  script:
    - cd terraform
    - cat cluster_ip.txt
  dependencies:
    - connect-to-cluster-job
  artifacts:
    paths:
      - terraform/terraform.tfstate
      - terraform/cluster_ip.txt
  only:
    - main
  when: manual 

terraform-destroy-job:
  stage: destroy
  script:
    - apk add --no-cache jq
    - mkdir -p ~/.ssh
    - echo "$ENCODED_ID_ED25519" | base64 -d > ~/.ssh/id_ed25519
    - echo "$ID_ED25519_pub" > ~/.ssh/id_ed25519.pub
    - chmod 600 ~/.ssh/id_ed25519
    - cd terraform
    - terraform init
    - terraform destroy -auto-approve -var "aws_access_key_id=$AWS_ACCESS_KEY_ID" -var "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" -var "aws_session_token=$AWS_SESSION_TOKEN"
  dependencies:
    - terraform-job
  artifacts:
    paths:
      - terraform/terraform.tfstate
  only:
    - main
  when: manual